本文档所用环境版本：Ubuntu:18.04  Docker:19.03  Mysql:5.7

1.通过Docker拉取Mysql5.7镜像到本地
	$sudo docker pull mysql:5.7
	
2.安装Mysql-Client客户端用来登录Docker中的Mysql服务
	$sudo apt-get install mysql-client
	
3.准备Mysql配置文件
	Mysql客户端安装后的默认配置文件在/etc/mysql/my.cnf, 而自定义的配置文件一般放在/etc/mysql/conf.d这个路径下。
	现在我们在本地host主机上自定义的某个目录(如/data/mysql/conf/)，先创建两个文件master.conf和slave.conf，分别用于配置主从两个节点。
	/data/mysql/conf/master.conf文件内容如下：
	[client]
	default-character-set=utf8
	[mysql]
	default-character-set=utf8
	[mysqld]
	log_bin = log  #开启二进制日志，用于从节点的历史复制回放
	collation-server = utf8_unicode_ci
	init-connect='SET NAMES utf8'
	character-set-server = utf8
	server_id = 1  #需保证主库和从库的server_id不同， 假设主库设为1
	replicate-do-db=fileserver  #fileserver是需要复制的数据库名，需复制多个数据库的话则重复设置这个选项
	
	/data/mysql/conf/slave.conf文件内容如下：
	[client]
	default-character-set=utf8
	[mysql]
	default-character-set=utf8
	[mysqld]
	log_bin = log  #开启二进制日志，用于从节点的历史复制回放
	collation-server = utf8_unicode_ci
	init-connect='SET NAMES utf8'
	character-set-server = utf8
	server_id = 2  #需保证主库和从库的server_id不同， 假设从库设为2
	replicate-do-db=fileserver  #fileserver是需要复制的数据库名，需复制多个数据库的话则重复设置这个选项
	
4.Docker分别运行MySQL主/从两个容器
	将mysql主节点运行起来：
	sudo docker run -d --name mysql-master -p 13306:3306 -v /data/mysql/conf/master.conf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /data/mysql/datam:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7
	运行参数说明:
	–name mysql-master: 容器的名称设为mysql-master
	-p 13306:3306: 将host的13306端口映射到容器的3306端口
	-v /data/mysql/conf/master.conf:/etc/mysql/mysql.conf.d/mysqld.cnf ： master.conf配置文件挂载
	-v /data/mysql/datam:/var/lib/mysql ： mysql容器内数据挂载到host的/data/mysql/datam， 用于持久化
	-e MYSQL_ROOT_PASSWORD=123456 : mysql的root登录密码为123456
	
	将mysql从节点运行起来：
	sudo docker run -d --name mysql-slave -p 13307:3306 -v /data/mysql/conf/slave.conf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /data/mysql/datas:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7
	运行参数说明:
	–name mysql-slave: 容器的名称设为mysql-slave
	-p 13307:3306: 将host的13307端口映射到容器的3306端口
	-v /data/mysql/conf/slave.conf:/etc/mysql/mysql.conf.d/mysqld.cnf ： slave.conf配置文件挂载
	-v /data/mysql/datas:/var/lib/mysql ： mysql容器内数据挂载到host的/data/mysql/datas， 用于持久化
	-e MYSQL_ROOT_PASSWORD=123456 : mysql的root登录密码为123456
	
5.登录Mysql主从节点进行同步
	登录主节点：
	mysql -u root -h 127.0.0.1 -P13306 -p
	123456
	create user slave identified by 'slave';
	GRANT REPLICATION SLAVE ON *.* TO 'slave'@'%' IDENTIFIED BY 'slave';
	flush privileges;
	create database fileserver default character set utf8mb4;
	show master status\G;
	show master status;
	
	新开一个终端查看mysql master的容器独立ip地址：
	docker inspect --format='{{.NetworkSettings.IPAddress}}' mysql-master
	# 比如输出得到: 172.17.0.2
	
	登录从节点：
	mysql -u root -h 127.0.0.1 -P13307 -p
	123456
	stop slave;
	create database fileserver default character set utf8mb4;
	CHANGE MASTER TO MASTER_HOST='172.17.0.2',MASTER_PORT=3306,MASTER_USER='slave',MASTER_PASSWORD='slave',MASTER_LOG_FILE='log.000004',MASTER_LOG_POS=1035;
	# MASTER_HOST的值就是mysql master的容器独立ip地址，MASTER_LOG_FILE和MASTER_LOG_POS的值可通过在Mysql主节点输入show master status;命令查询得到。
	start slave;
	show slave status\G;

6.测试主从同步是否成功
	在主机中新建tbl_test表：
	use fileserver;
	create table tbl_test (`user` varchar(64) not null, `age` int(11) not null) default charset utf8;
	在从机中查看是否有该表：
	use fileserver;
	show tables;
	
7.机器重启之后同步主从mysql的方法：
	1.通过Docker分别运行MySQL主/从两个容器
	$sudo docker run -d --name mysql-master -p 13306:3306 -v /data/mysql/conf/master.conf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /data/mysql/datam:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7
	$sudo docker run -d --name mysql-slave -p 13307:3306 -v /data/mysql/conf/slave.conf:/etc/mysql/mysql.conf.d/mysqld.cnf -v /data/mysql/datas:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7
	
	2.通过Mysql客户端分别登录主/从Mysql容器
	$mysql -u root -h 127.0.0.1 -P13306 -p
	$mysql -u root -h 127.0.0.1 -P13307 -p
	
	3.在master节点中查看master的最新状态，记录log File和Position
	show master status\G;
	
	4.新建终端查看master的IP地址：
	$sudo docker inspect --format='{{.NetworkSettings.IPAddress}}' mysql-master
	
	5.在slave节点中进行一下操作
	stop slave;
	reset slave;
	#重新配置slave的master信息，这里要把MASTER_HOST，MASTER_LOG_FILE，MASTER_LOG_POS改为最新的
	CHANGE MASTER TO MASTER_HOST='172.17.0.2',MASTER_PORT=3306,MASTER_USER='slave',MASTER_PASSWORD='slave',MASTER_LOG_FILE='log.000005',MASTER_LOG_POS=306;
	start slave;
	show slave status\G;
