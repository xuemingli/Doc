1.安装完Git需要设置用户名和邮箱
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2.创建版本库
创建一个文件夹作为版本库的位置，然后在Git命令行中进入到该文件夹，输入git init即可把该文件夹变成Git仓库

3.往仓库中添加文件
使用git add命令添加文件，然后使用git commit命令提交，共需要两步。
因为commit可以一次提交很多文件，所以可以多次add不同的文件，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."
-m后面输入的是本次提交的说明。

4.时刻掌握仓库当前的状态
$git status 命令查看本地文件和仓库中的差异，有哪些文件被改动过
$git diff 命令查看具体改动的文件之间的差异，e.g.$git diff readme.txt
把修改后的文件提交到仓库和提交一个新文件方法一样：
$ git add file2.txt
$ git commit -m "add distribute"

5.查看提交日志
$git log 命令显示从最近到最远的提交日志，我们可以看到3次提交
$git log --pretty=oneling 可以把日志变为一行进行显示

6.回退版本/返回未来版本
回退版本前Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
回退到上一个版本使用以下命令：
$git reset --hard HEAD^

返回未来版本：
只要记得未来版本的commit id就可以返回到未来版本
如果未来版本的commit id是31b5817380dc20ebef108s07acac573fa46b05f4，返回未来版本使用以下命令：
$ git reset --hard 31b58

如果不记得未来版本的commit id，可以使用如下命令查看：
$git reflog

7.回退已经add但未commit的文件：
$git reset HEAD readme.txt
reset命令可以把add动作撤销，也可以回退版本。

8.丢弃工作区的修改，使之与仓库中的文件一致，或者不小心删除了工作区的某个文件想要再找回来：
$git checkout -- readme.txt

9.删除文件
删除文件操作如下两步命令：
$git rm test.txt
$git commit -m "remove test.txt"

10.关联远程Github仓库
*创建一个Github账号
*在Git Bash中船舰SSH Key:
	$ssh-keygen -t rsa -C "youremail@example.com"
	然后一路回车，会在C:\Users\%USERNAME%\.ssh中生成id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
*登陆GitHub，打开“settings”，“SSH and GPG keys”页面，点“New SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。
*登陆GitHub，点击右上角的“New repository”创建一个远程仓库，在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
*在本地的learngit仓库下运行命令：
	$git remote add origin git@github.com:xuemingli/learngit.git
	请千万注意，把上面的xuemingli替换成你自己的GitHub账户名,否则推送不上。添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
*把本地库的所有内容推送到远程库上：
	$git push -u origin master
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	从现在起，只要本地作了提交，就可以通过如下命令推送到远程库：
	$git push origin master

11.从远程库克隆
*登陆GitHub，创建一个新的仓库，名字叫gitskills，勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。
*在Git Bash中进入到存放仓库的目录，然后用命令git clone克隆一个远程库到本地：
	$git clone git@github.com:xuemingli/gitskills.git
	如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	
12.Git分支
*创建一个叫dev的分支：
	$git branch dev
*切换到dev分支：
	(旧版)$git checkout dev
	(新版)$git switch dev
*创建一个叫dev的分支并切换到它：
	(旧版)$git checkout -b dev
	(新版)$git switch -c dev
*查看所有分支，当前分支前会有一个*号：
	$git branch
*合并当前分支到指定分支：
	$git merge dev
*删除dev分支：
	$git branch -d dev
*如果合并的两个分支之间有冲突，姚先解决冲突的文件再合并，使用git status命令可以查看哪些文件有冲突，然后编辑这些文件。
*用git log --graph命令查看分支合并图：
	$git log --graph --pretty=oneline --abbrev-commit
*通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
合并是使用--no-ff参数，表示禁用Fast forward模式：
	$git merge --no-ff -m "merge with no-ff" dev
	因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
*分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

13.标签管理
*在Git中打标签非常简单，首先，切换到需要打标签的分支上，然后，敲命令git tag <name>就可以打一个新标签：
	$git tag v1.0
*用命令git tag查看所有标签：
	$git tig
	标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
	$git show v1.0
*默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
方法是找到历史提交的commit id，然后打上就可以了：
	$git tag v0.9 f52c633
*还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
	$git tag -a v1.2 -m "Version 1.2 released" 1094abd
*如果标签打错了，也可以删除：
	$git tag -d v1.2
*因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
如果要推送某个标签到远程，使用命令git push origin <tagname>：
	$git push origin v1.2
	或者一次性推送全部尚未推送到远程的本地标签：
	$git push origin --tags
*如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
	$git tag -d v1.2
	然后，从远程删除。删除命令也是push，但是格式如下：
	$git push origin :refs/tags/v1.2
	要看看是否真的从远程库删除了标签，可以登陆GitHub查看。

14.忽略特殊文件
	*有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。
		好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
		不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore。
		忽略文件的原则是：
			忽略操作系统自动生成的文件，比如缩略图等；
			忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
			忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
		举个例子：
			假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有Desktop.ini文件，因此你需要忽略Windows自动生成的垃圾文件：
				# Windows:
				Thumbs.db
				ehthumbs.db
				Desktop.ini
			然后，继续忽略Python编译产生的.pyc、.pyo、dist等文件或目录：
				# Python:
				*.py[cod]
				*.so
				*.egg
				*.egg-info
				dist
				build
			加上你自己定义的文件，内容如下:
				# My configurations:
				db.ini
				deploy_key_rsa
			以上内容合起来最终得到一个完整的.gitignore文件。
		最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。
	*有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了，如果你确实想添加该文件，可以用-f强制添加到Git：
		$git add -f App.class
		或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
		$git check-ignore -v App.class
		.gitignore:3:*.class	App.class
		Git会告诉我们.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。

15.配置别名
	*有没有经常敲错命令？比如git status？status这个单词真心不好记。如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
		我们只需要敲一行命令，告诉Git，以后st就表示status：
		$git config --global alias.st status
	*当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
		$git config --global alias.co checkout
		$git config --global alias.ci commit
		$git config --global alias.br branch
		--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
	*甚至还有人丧心病狂地把lg配置成了：
		$git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	*配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中.
		别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中,配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
