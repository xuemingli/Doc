1.安装Redis服务
	$sudo apt-get install redis-server
	
2.常用命令
	# 通过redis-cli启动客户端
	redis-cli

	# 用密码的方法登录
	auth YourPasswd
	
	# 清除屏幕打印
	clear
	
	# 退出当前的客户端连接
	quit
	
	exit
	
	# 关闭redis服务
	shutdown
	
	# 清空数据库,包括0-15所有的数据库
	flushall
	
3.RDB持久化和AOF持久化说明
	>>>RDB持久化
		-->RDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发。
		-->手动触发分别对应save和bgsave命令：
			save命令：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。
			bgsave命令：Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，完成后自动结束。阻塞只发生在fork阶段，一段时间很短。
			
			bgsave命令是针对save阻塞问题做的优化。因此Redis内部所有涉及到RDB操作都采用bgsave的方式，而save命令可以废弃。
			bgsave流程说明：
				*执行bgsave命令，Redis父进程判断当前是否存在正在执行的子进程，如只RDB/AOF子进程，如果存在bgsave命令直接返回。
				*父进程执行fork操作创建子进程，fork操作过程中父进程会阻塞，通过info stats命令查看latest_fork_usec选项，可以获取最近一个fork以操作的耗时，单位为微秒。
				*父进程仍fork完成后，bgsave命令返回“Background saving started”信息并不再阻塞父进程，可以继续响应其他命令。
				*子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行lastsave命令可以获取最后一次生成尺RDB的时间，对应info统计的rdb_last_save_time选项。
				*进程发送信号给父进程衣示完成，父进程更新统计信息，具体见info Persistence下的rdb_*相关选项。
			
		-->Redis内部还存在自动触发RDB的持久化机制，例如以下场景:
			*使用save相关配置，如‘save m n’表示m秒之内数据集存在n次修改时，自动触发bgsave。
			*如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点。
			*执行debug reload命令重新加载Redis时，也会自动触发save操作。
			*默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。
			
		-->RDB文件的处理：
			保存：RDB文件保存在dir配置指定的目录下，文件名通过dbfilename配置指定。可以通过执行config set dir {newDir} 和 config set dbfilename {newFileName}运行期动态执行，当下次运行时RDB文件会保存到新目录。
			压缩：Redis默认采用LZF算法对生成的RDB文件做压缩处理，压缩后的文件远远小于内存大小，默认开启，可以通过参数config set rdbcompression {yes|no}动态修改。
			校验：如果Redis加载损坏的RDB文件时拒绝启动，并打印如下日志，这时可以使用Redis提供的redis-check-dump工具检测RDB文件并获取对应的错误报告。
				Short read or OOM loading DB. Unrecoverable error , aborting now.		
		
		-->RDB的优点:
			RDB是一个紧凑压缩的二进制文件，代表Redis在某一个时间点上的数据快照。非常适合用于备份，全量复制等场景。比如每6小时执行bgsave备份，并把RDB文件拷贝到远程机器或者文件系统中（如hdfs），用于灾难恢复。
			Redis加载RDB恢复数据远远快于AOF方式。

		-->RDB的缺点:
			RDB方式数据没办法做到实时持久化/秒级持久化。因为bgsave每次运行都要执行fork操作创建子进程，属于重量级操作，频繁执行成本过高。
			RDB文件使用特定二进制格式保存，Redis版本演进过程中有多个格式的RDB版本，存在老版本Redis服务无法兼容新版RDB格式的问题。
	
	>>>AOF持久化
		-->AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。
		
		-->开启AOF功能需要设置配置：appendonly yes,默认不开启。AOF文件通过appendfilename 配置设置，默认文件名是appendonly.aof。保存路径同RDB持久化方式一致。通过dir配置指定。
		
		-->AOF的工作流程操作：
			*所有的写入命令会追加到aof_buf（缓冲区）中。
			*AOF缓冲区根据对应的策略向硬盘做同步操作。
			*随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩的目的。
			*当Redis服务重启时，可以加载AOF文件进行数据恢复。
			
		-->AOF为什么把命令追加到aof_buf中？
			Redis使用单线程响应命令，如果每次写AOF文件命令都直接追加到硬盘，那么性能完全取决于当前硬盘负载。先写入缓冲区aof_buf中，还有另一个好处，Redis可以提供多种缓冲区同步硬盘的策略，在性能和安全性方面做出平衡。
	
		-->Redis提供了多种AOF缓冲区同步文件策略，由参数appendfsync控制，不同值的含义表示如下：
			*配置为always时，每次写入都要同步AOF文件，在一般的STAT硬盘上，Redis只能支持大约几百TPS写入，显然跟Redis高性能特性背道而驰，不建议配置。
			*配置为no,由于操作系统每次同步AOF文件的周期不可控，而且会增大每次同步硬盘的数据量，虽然提升了性能，但数据安全性无法保证。
			*配置为everysec,是建议的同步策略，也是默认配置，做到兼顾性能和数据安全性，理论上只有在系统突然宕机的情况下丢失1s的数据。（严格来说最多丢失1s数据是不准确）
			
		-->AOF文件重写机制：
			随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是把Redis进程内的数据转化为写命令同步到新AOF文件的过程。
			AOF重写降低了文件占用空间，除此之外，另一个目的是：更小的AOF文件可以更快地被Redis加载。
			
			重写后的AOF文件为什么可以变小？有如下原因：
				*进程内已经超时的数据不再写入文件。
				*旧的AOF文件含有无效命令，如del key1、 hdel key2、srem keys、set a 111、set a 222等。重写时只使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令。
				*多条写命令可以合并为一个，如lpush list a、lpush list b、 lpush list c 可以转化为：lpush list a b c。为了防止命令过大造成客户端缓冲区溢出，对于list、set、hash、zset等类型曹组，以64个元素为界拆分为多条。
			
			AOF重写过程可以手动触发和自动触发：

				手动触发：直接调用bgrewriteaof命令

				自动触发：根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参数确定自动触发时机
					auto-aof-rewrite-min-size:表示运行AOF重写时文件最小体积，默认为64MB
					auto-aof-rewrite-percentage:代表当前AOF文件空间（aof_current_size）和上一次重写后AOF文件空间（aof_base_size）的值
					自动触发时机：aof_current_size>auto-aof-rewrite-min-size && (aof_current_size-aof_base_size) / aof_base_size >= auto-aof-rewrite-percentage
					其中aof_current_size和aof_base_size可以在info Persistence统计信息中查看。
		
		-->AOF文件重写流程：
			*执行AOF重写请求：
				如果当前进程正在执行AOF重写，请求不执行并返回如下响应:
					ERR Background append only file rewriting already in progress
					
				如果当前进程正在执行bgsave操作，重写命令延迟到bgsave完成后再执行，返回如下响应：
					Background append only file rewriting scheduled
					
			*父进程执行fork创建子进程，开销等同于bgsave过程。
			*主进程fork操作完成后，继续响应其他命令。所有修改命令依然写入AOF缓冲区并根据appendfsync策略同步到硬盘，保证原有AOF机制正确性。
			*由于fork操作运用写时复制技术，子进程只能共享fork操作时的内存数据。由于父进程依然响应命令，Redis使用"AOF重写缓冲区"保存这部分新数据，防止新AOF文件生成期间丢失这部分数据。
			*子进程根据内存快照，按照命令合并规则写入到新的AOF文件。每次批量写入硬盘数据量由配置aof-rewrite-incremental-fsync控制，默认为32MB，防止单次刷盘数据过多造成硬盘阻塞。
			*新AOF文件写入完成后，子进程发送信号给父进程，父进程更新统计信息，具体见info persistence下的aof_*相关统计。
			*父进程把AOF重写缓冲区的数据写入到新的AOF文件。
			*使用新AOF文件替换老文件，完成AOF重写。
			
		-->AOF的优点
			使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）, AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。

		-->AOF 的缺点
			对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。
	
	>>>二者的区别
		RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。
		AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。
	
	>>>Redis 支持同时开启 RDB 和 AOF,系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。
	
4.配置文件说明
	Ubuntu系统上的配置文件在/etc/redis/redis.conf
	
	>>>Redis服务器默认是不需要密码的，假设设置密码为123456
		需要去掉配置文件中requirepass 前面的注释#，在后面添加密码
		requirepass 123456
	
	>>>开启Redis的远程连接，需要注释掉绑定地址
		#bind 127.0.0.1
	
	>>>Redis的默认端口是6379
		port 6379
		
	>>>默认使用RDB方式来做数据持久化
		rdbchecksum yes
		
	>>>RDB持久化的默认备份文件是dump.rdb,文件路径是/var/lib/redis
		dbfilename dump.rdb
		dir /var/lib/redis
		
	>>>默认AOF持久化的方式是关闭的，如果要使用AOF方式，需要把no改为yes
		appendonly no
		
	>>>AOF持久化的默认备份文件是appendonly.aof
		appendfilename "appendonly.aof"
		
	>>>AOF持久化的3种同步方式，默认是每秒同步一次
		# appendfsync always
		appendfsync everysec
		# appendfsync no
		
	
	